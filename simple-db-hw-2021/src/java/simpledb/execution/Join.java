package simpledb.execution;

import simpledb.storage.TupleIterator;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private OpIterator child1;
    private OpIterator child2;
    private JoinPredicate jp;
    private List<Tuple> reslt;
    private Iterator<Tuple> resit;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.jp = p;
        this.child1 = child1;
        this.child2 = child2;
        this.reslt = init_it();
        this.resit = this.reslt.iterator();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.jp;
    }
    public List<Tuple> init_it(){
        List<Tuple> result = new ArrayList<>();
        try {
            this.child1.open();
            this.child2.open();
            while(this.child1.hasNext()){
                Tuple tp1 = this.child1.next();
                this.child2.rewind();
                while (this.child2.hasNext()){
                    Tuple tp2 = this.child2.next();
                    if (this.jp.filter(tp1,tp2)){
                        Tuple ntp = Tuple.merge(tp1,tp2);
                        result.add(ntp);
                    }
                }
            }
            this.child1.close();
            this.child2.close();
        }catch (Exception e){
            e.printStackTrace();
        }
        return result;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return null;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return null;
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleIterator sc1 = (TupleIterator) this.child1;
        TupleIterator sc2 = (TupleIterator) this.child2;
        return TupleDesc.merge(sc1.getTupleDesc(),sc2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.resit = this.reslt.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (this.resit.hasNext()){
            return this.resit.next();
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    }

}
